from aiogram import types, Dispatcher, Bot
from aiogram.dispatcher import FSMContext
from loguru import logger
from contextlib import suppress

import api.base
from api.girl_form import GirlForm
from api.payment import Payment
from api.user import BackendUser, UserSupportQuestion
from handlers.girl.secret_room import display_girl_form
from keyboards.default.admin_panel import AdminMenuKeyboard
from keyboards.inline.admin_panel import AdminQuestionInline
from states.admin.admin_panel import AdminPanelStates
from templates.admin.admin_panel import SUPPORT_QUESTION_TEMPLATE, NO_SUPPORT_QUESTIONS
from templates.user.account import NO_SCREENSHOTS
from templates.user.support import QUESTION_ANSWERED


async def admin_enter(msg: types.Message):
    if not await BackendUser.check_is_admin():  # TODO: –í—ã–Ω–µ—Å—Ç–∏ –≤ –¥–µ–∫–æ—Ä–æ—Ç–æ—Ä
        return

    await AdminPanelStates.menu.set()
    await msg.answer(
        "<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω–∫—É</b> ‚úã\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã –∫–æ–º–∞–Ω–¥—ã:\n"
        "/send - –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n"
        "/add_balance - –¥–ª—è –∑–∞—á–∏—Å–ª–µ–Ω–∏—è –Ω–∞ –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        "/ban - –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        "/check - –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–Ω–∫–µ—Ç—ã\n"
        "/approve - –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã\n"
        "/reject - –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã\n"
        "\n\n<i>–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø—Ä–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–æ–º–∞–Ω–¥—É</i>"
        ,
        reply_markup=AdminMenuKeyboard.admin_menu()
    )


async def support_admin(msg: types.Message):
    if not await BackendUser.check_is_admin():
        return

    await AdminPanelStates.support_admin.set()
    await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞ –∫–∞–∫–æ–π —Ç–∏–ø –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–≤–µ—á–∞—Ç—å",
                     reply_markup=AdminMenuKeyboard.support_menu())


def get_filtered_support_messages_handler(filter_word):
    async def inner(msg: types.Message, state: FSMContext = None):
        questions = await UserSupportQuestion.list(type_filter=filter_word)

        if not questions:
            await msg.answer(
                NO_SUPPORT_QUESTIONS
            )
            return

        for question in questions:
            await msg.answer(
                SUPPORT_QUESTION_TEMPLATE.format(question=question.question_body, user=question.user),
                reply_markup=AdminQuestionInline.answer(question.id)
            )

    return inner


async def answer_question(query: types.CallbackQuery, callback_data: dict):
    from app import bot
    text = query.message.text
    await bot.delete_message(query.from_user.id, query.message.message_id)
    await bot.send_message(query.from_user.id, text=text + "\n" + ("=" * 10) + "\n –ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç üëá", )
    await AdminPanelStates.support_answer.set()

    state = Dispatcher.get_current().current_state()
    async with state.proxy() as data:
        data['id'] = callback_data["id"]


async def answer_handler(msg: types.Message, state: FSMContext = None):
    async with state.proxy() as data:
        await UserSupportQuestion.update(id_=data['id'], answer_body=msg.text)

    await msg.answer("–ó–∞–ø–∏—Å–∞–Ω–æüëå")
    await AdminPanelStates.support_admin.set()


async def payment_admin(msg: types.Message):
    if not await BackendUser.check_is_admin():
        return

    payments = await Payment.list(status="CREATED")

    if not payments:
        await msg.answer(
            NO_SCREENSHOTS
        )
        return

    for payment in payments:
        image = await api.base.get_image(payment.screenshot)
        text = (
            f"id: {payment.id}\n"
            f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {payment.user}\n"
            f"—Å—Ç–∞—Ç—É—Å: {payment.status}\n"
            f"—Å—É–º–º–∞: <b>{payment.amount}</b>"
        )
        await msg.answer_photo(image, caption=text, reply_markup=AdminQuestionInline.approve_screenshot(payment.id))


async def payment_action(query: types.CallbackQuery, callback_data: dict):
    if not await BackendUser.check_is_admin():
        return

    if callback_data["type"] == "approve":
        backend_status = "APPROVED"
    else:
        backend_status = "REJECTED"

    await Payment.update(callback_data["id"], status=backend_status)
    await query.message.delete()


async def send_to_user(msg: types.Message):
    if not await BackendUser.check_is_admin():
        return
    try:
        text = msg.text
        text = text.removeprefix("/send").strip()
        user_id, message_text = text.split(" ", 1)

        bot = Bot.get_current()

        await bot.send_message(user_id, message_text)
        await msg.answer("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")

    except Exception:
        await msg.answer((
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω\n"
            "–ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/send (–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è) (—Å–æ–æ–±—â–µ–Ω–∏–µ)"
        ))


async def add_balance_to_user(msg: types.Message):
    if not await BackendUser.check_is_admin():
        return
    try:
        text = msg.text
        text = text.removeprefix("/add_balance").strip()
        user_id, amount = text.split(" ", 1)
        amount = float(amount)
        be = await BackendUser.get(tg_user_id=user_id)

        await BackendUser.update(tg_user_id=user_id, balance=be.balance + amount)

        await msg.answer("–ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω")

    except Exception:
        await msg.answer((
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω\n"
            "–ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/add_balance (–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è) (—Å—É–º–º–∞ –∑–∞—á–∏—Å–ª–µ–Ω–∏—è)"
        ))



async def ban_user(msg: types.Message):
    if not await BackendUser.check_is_admin():
        return
    try:
        text = msg.text
        text = text.removeprefix("/ban").strip()
        user_id = int(text)
        be = await BackendUser.get(tg_user_id=user_id)
        await BackendUser.update(tg_user_id=user_id, has_access=not be.has_access)
        await msg.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} {'—Ä–∞–∑–±–∞–Ω–µ–Ω' if not be.has_access else '–∑–∞–±–∞–Ω–µ–Ω'}")

    except Exception:
        await msg.answer((
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω\n"
            "–ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/add_balance (–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)\n"
            "–ü—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—É–¥–µ—Ç —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
        ))


async def list_users(msg: types.Message):
    if not await BackendUser.check_is_admin():
        return
    text = ""
    for user in await BackendUser.list():
        user_text = (
            f"<b>id:</b> {user.id}\n"
            f"<b>–ø–æ–ª:</b> {user.sex}\n"
            f"<b>–±–∞–ª–∞–Ω—Å:</b> {user.balance}\n"
            f"<b>–µ—Å—Ç—å –¥–æ—Å—Ç—É–ø:</b> {'–î–∞' if user.has_access else '–ù–µ—Ç'}\n"
        )
        text += user_text
        text += "\n"

    await msg.answer(text)


async def forms(msg: types.Message):
    if not await BackendUser.check_is_admin():
        return
    await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–∏–µ –∞–Ω–∫–µ—Ç—ã –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å", reply_markup=AdminQuestionInline.form_select())


async def form_view_list(query: types.CallbackQuery, callback_data: dict):
    if not await BackendUser.check_is_admin():
        return

    await query.message.edit_text(query.message.text)

    gf_list = await GirlForm.list({"status": callback_data.get("type", "")})
    if not gf_list:
        await query.message.answer("–ù–µ—Ç –∞–Ω–∫–µ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
        return

    text = ""

    for gf in gf_list:
        text += (
            f"id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {gf.user}\n"
            f"—Å—Ç–∞—Ç—É—Å: {gf.status}\n"
            f"—Ç–æ–ø —Å—Ç–∞—Ç—É—Å: {'–î–∞' if gf.has_top_status else '–ù–µ—Ç'}\n"
            f"—Ü–µ–Ω–∞: {gf.price if gf.price is not None else '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}"
        )
        text += "\n\n"
    await query.message.answer(
        text
    )


async def admin_gf_view(gf):
    text = await display_girl_form(gf)
    if not text:
        text = "–ê–Ω–∫–µ—Ç–∞ –ø—É—Å—Ç–∞—è"
    else:
        text += f"\n\n<b>ID:</b> {gf.user}\n"
        text += f"<b>–°—Ç–∞—Ç—É—Å:</b> {gf.status}\n"
        text += f"<b>–¶–µ–Ω–∞:</b> {gf.price}\n"
        text += f"<b>–¢–æ–ø —Å—Ç–∞—Ç—É—Å:</b> {gf.has_top_status}\n"
    return text


async def form_detail_view(msg: types.Message):
    if not await BackendUser.check_is_admin():
        return
    try:
        text = msg.text
        text = text.removeprefix("/check").strip()
        user_id = int(text)
        gf = await GirlForm.get(user_id)

        for photo_obj in gf.photos:
            b = await api.base.get_image(photo_obj.photo)
            caption = None
            if photo_obj.is_approve:
                caption = "–§–æ—Ç–æ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"
            await msg.answer_photo(b, caption=caption)

        await msg.answer(
            await admin_gf_view(gf)
        )
    except Exception:
        logger.exception("Error while getting detail form")
        await msg.answer((
            "–û—à–∏–±–∫–∞\n"
            "–ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/check (–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)\n"
        ))


async def form_approve(msg: types.Message):
    if not await BackendUser.check_is_admin():
        return
    try:
        text = msg.text
        text = text.removeprefix("/approve").strip()

        user_id, price, top_status = text.split()

        user_id = int(user_id)
        price = float(price)
        if top_status not in ["+", "-"]:
            raise ValueError
        top_status = (top_status == "+")
        gf = await GirlForm.update(tg_user_id=user_id, price=price, has_top_status=top_status, status="CONFIRMED")

        await msg.answer(
            "–ò–∑–º–µ–Ω–µ–Ω–æ\n\n"+
            await admin_gf_view(gf)
        )
    except Exception:
        logger.exception(f"Error while approving {msg.text=}")
        await msg.answer((
            "–û—à–∏–±–∫–∞\n"
            "–ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/approve (–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è) (–ø—Ä–∞–π—Å:—á–∏—Å–ª–æ) (—Ç–æ–ø —Å—Ç–∞—Ç—É—Å: +- )\n"
        ))


async def form_reject(msg: types.Message):
    try:
        text = msg.text
        text = text.removeprefix("/reject").strip()

        user_id = int(text)

        gf = await GirlForm.update(tg_user_id=user_id, status="REJECTED")

        await msg.answer(
            "–ò–∑–º–µ–Ω–µ–Ω–æ\n\n"+
            await admin_gf_view(gf)
        )

    except Exception:
        logger.exception(f"Error while approving {msg.text=}")
        await msg.answer((
            "–û—à–∏–±–∫–∞\n"
            "–ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/reject (–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)\n"
        ))