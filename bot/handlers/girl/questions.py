import asyncio
import re

from aiogram import Dispatcher
from loguru import logger

from backend_constants.location import COUNTRY_LIST
from handlers.girl.base_questions import TextQuestion, ChoicesQuestion, MulticheckboxQuestion, BinaryQuestion, \
    MediaQuestion
import api.girl_form


class CountryQuestion(ChoicesQuestion):
    question_id = "CountryQuestion"
    question_text = "–£–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à—É —Å—Ç—Ä–∞–Ω—É!"

    async def choices(self):
        return [country["name"] for country in COUNTRY_LIST]

    async def processor(self, msg, choice):
        for i in COUNTRY_LIST:
            if i["name"] == choice:
                asyncio.create_task(api.girl_form.GirlForm.update(country=i["id"]))

        state = Dispatcher.get_current().current_state()
        async with state.proxy() as data:
            data["CountryQuestion"] = choice


class CityQuestion(ChoicesQuestion):
    question_id = "CityQuestion"
    question_text = "–£–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à –≥–æ—Ä–æ–¥ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è!"

    async def choices(self):
        gf = await api.girl_form.GirlForm.get()
        for country in COUNTRY_LIST:
            if country["id"] == gf.country:
                return [city["name"] for city in country["cities"]]

        return []

    async def processor(self, msg, choice):
        city_list = []
        for country in COUNTRY_LIST:
            city_list.extend(country["cities"])

        for i in city_list:
            if i["name"] == choice:
                asyncio.create_task(api.girl_form.GirlForm.update(city=i["id"]))


class NameQuestion(TextQuestion):
    question_id = "NameQuestion"
    question_text = "–£–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—àe –∏–º—è!"

    async def validator(self, text):
        return len(text) <= 64


class AgeQuestion(TextQuestion):
    question_id = "AgeQuestion"
    question_text = "–£–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç! \n\n <i>‚ô¶Ô∏è –û—Ç 18 –ª–µ—Ç</i>"

    async def validator(self, x):
        return re.fullmatch(r"\d+", x) and 18 <= int(x) <= 100


class BodyParamsQuestion(TextQuestion):
    question_id = "BodyParamsQuestion"
    question_text = "–£–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã!\n\n<i>üîπ –ù–∞–ø—Ä–∏–º–µ—Ä, 90/60/90</i>"

    async def validator(self, params):
        return re.fullmatch(r"(\d+)[ \\/](\d+)[ \\/](\d+)", params)

    async def processor(self, msg, choice):
        match = re.fullmatch(r"(\d+)[ \\/](\d+)[ \\/](\d+)", msg.text)
        body_params = match.group(1) + "/" + match.group(2) + "/" + match.group(3)
        asyncio.create_task(
            api.girl_form.GirlForm.update_additional_data_key("BodyParamsQuestion", body_params)
        )


class NationalityQuestion(TextQuestion):
    question_id = "NationalityQuestion"
    question_text = "–£–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à—É –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å!"


class PurposeQuestion(MulticheckboxQuestion):
    question_id = "PurposeQuestion"
    question_text = "–ö–∞–∫–∏–µ —É –≤–∞—Å —Ü–µ–ª–∏ –≤ –±–æ—Ç–µ?"

    async def choices(self):
        return [
            "–õ–µ–≥–∫–∏–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è",
            "–†–∞–∑–æ–≤—ã–µ –≤—Å—Ç—Ä–µ—á–∏",
            "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è",
            "–°–µ—Ä—å—ë–∑–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è"
        ]

    async def processor_task(self, choice):
        gf = await api.girl_form.GirlForm.get()
        gf.additional_data[self.question_id] = choice
        for field in ["LongFinanceQuestion", "ShortFinanceQuestion", "DocumentsQuestion"]:
            if gf.additional_data.get(field):
                gf.additional_data.pop(field)
        await api.girl_form.GirlForm.update(additional_data=gf.additional_data)

    async def processor(self, msg, choice: list[str]):
        asyncio.create_task(
            self.processor_task(choice)
        )

        state = Dispatcher.get_current().current_state()
        async with state.proxy() as data:
            data["PurposeQuestion"] = choice

    async def next(self):
        state = Dispatcher.get_current().current_state()
        async with state.proxy() as data:
            data["PurposeQuestion"] = data.get("PurposeQuestion", [])

            if "–°–µ—Ä—å—ë–∑–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è" in data["PurposeQuestion"]:
                return "LongFinanceQuestion"

            if "–†–∞–∑–æ–≤—ã–µ –≤—Å—Ç—Ä–µ—á–∏" in data["PurposeQuestion"]:
                return "ShortFinanceQuestion"

            if "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è" in data["PurposeQuestion"]:
                return "DocumentsQuestion"

        return self.next_id


class AbstractFinanceQuestion(TextQuestion):
    async def get_currency(self):
        state = Dispatcher.get_current().current_state()
        async with state.proxy() as data:
            country = data.get("CountryQuestion", None)
            if country is None:
                gf = await api.girl_form.GirlForm.get()
                country = ""
                for cntry_obj in COUNTRY_LIST:
                    if cntry_obj["id"] == gf.country:
                        country = cntry_obj["name"]

            if "—Ä–æ—Å—Å–∏—è" in country.lower():
                return "—Ä—É–±–ª—è—Ö"
        return "–¥–æ–ª–ª–∞—Ä–∞—Ö"

    async def text(self):
        currency = await self.get_currency()
        return self.question_text.format(currency)

    async def validator(self, text):
        return re.fullmatch(r"\d+", text)

    async def processor(self, msg, choice):
        currency = await self.get_currency()
        text = msg.text + " "+("‚ÇΩ" if currency == "—Ä—É–±–ª—è—Ö" else "$")
        asyncio.create_task(
            api.girl_form.GirlForm.update_additional_data_key(self.question_id, text)
        )


class LongFinanceQuestion(AbstractFinanceQuestion):
    question_id = "LongFinanceQuestion"
    question_text = "–ö–∞–∫—É—é —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é –ø–æ–¥–¥–µ—Ä–∂—É –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –ø–æ–ª—É—á–∞—Ç—å –æ—Ç –º—É–∂—á–∏–Ω—ã –≤ –º–µ—Å—è—Ü –≤ {}?  \n\n<i>üîπ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–¥–µ–∫–≤–∞—Ç–Ω–æ –æ—Ü–µ–Ω–∏–≤–∞–π—Ç–µ —Å–≤–æ—é –≤–Ω–µ—à–Ω–æ—Å—Ç—å, –æ—Ç —ç—Ç–æ–≥–æ –Ω–∞–ø—Ä—è–º—É—é –∑–∞–≤–∏—Å–∏—Ç —Å—É–º–º–∞ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –¥–µ–≤—É—à–∫–∏</i>"

    async def next(self):
        state = Dispatcher.get_current().current_state()
        async with state.proxy() as data:
            data["PurposeQuestion"] = data.get("PurposeQuestion", [])

            if "–†–∞–∑–æ–≤—ã–µ –≤—Å—Ç—Ä–µ—á–∏" in data["PurposeQuestion"]:
                return "ShortFinanceQuestion"

            if "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è" in data["PurposeQuestion"]:
                return "DocumentsQuestion"

        return self.next_id


class ShortFinanceQuestion(AbstractFinanceQuestion):
    question_id = "ShortFinanceQuestion"
    question_text = "–ö–∞–∫—É—é —Å—É–º–º—É –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –ø–æ–ª—É—á–∞—Ç—å –∑–∞ –≤—Å—Ç—Ä–µ—á—É 2-3 —á–∞—Å–∞ —Å –∞–¥–µ–∫–≤–∞—Ç–Ω—ã–º –º—É–∂—á–∏–Ω–æ–π?\n\n<i>üîπ –£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –≤ {}</i>"

    async def next(self):
        state = Dispatcher.get_current().current_state()
        async with state.proxy() as data:
            data["PurposeQuestion"] = data.get("PurposeQuestion", [])

            if "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è" in data["PurposeQuestion"]:
                return "DocumentsQuestion"

        return self.next_id


class DocumentsQuestion(MulticheckboxQuestion):
    question_id = "DocumentsQuestion"
    question_text = "–ß—Ç–æ —É –≤–∞—Å –∏–º–µ–µ—Ç—Å—è –≤ –Ω–∞–ª–∏—á–∏–∏ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤?"

    async def choices(self):
        return [
            "–¢–æ–ª—å–∫–æ –∑–∞–≥—Ä–∞–Ω –ø–∞—Å–ø–æ—Ä—Ç",
            "–í–∏–∑–∞ –®–µ–Ω–≥–µ–Ω",
            "–í–∏–∑–∞ –ê–Ω–≥–ª–∏—è",
            "–í–∏–∑–∞ –°–®–ê"
        ]


class MarriedRelationsQuestion(BinaryQuestion):
    question_id = "MarriedRelationsQuestion"
    question_text = "–†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç–µ –ª–∏ –≤—ã –æ—Ç–Ω–æ—à–µ–Ω–∏—è –Ω–∞ –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω–æ–π –æ—Å–Ω–æ–≤–µ —Å –∂–µ–Ω–∞—Ç—ã–º–∏ –º—É–∂—á–∏–Ω–∞–º–∏?"


class AboutQuestion(TextQuestion):
    question_id = "AboutQuestion"
    question_text = "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ:\n–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ, —É–≤–ª–µ—á–µ–Ω–∏—è, —Ö–æ–±–±–∏\n\n<i>üîπ –ú–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤</i>"


class SexQuestion(TextQuestion):
    question_id = "SexQuestion"
    question_text = "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–≤–æ–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö –≤ —Å–µ–∫—Å–µ, –∂–µ–ª–∞–Ω–∏—è—Ö, –∑–∞–ø—Ä–µ—Ç–∞—Ö, —á–∞—Å—Ç–æ –º—É–∂—á–∏–Ω–µ —ç—Ç–æ –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ.\n\n<i>üîπ–ù–∞–ø–∏—à–∏—Ç–µ –º–∏–Ω—É—Å(-) –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞.</i>"


class WorkPhoneQuestion(TextQuestion):
    question_id = "WorkPhoneQuestion"
    question_text = "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ä–∞–±–æ—á–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"

    async def validator(self, phone):
        phone = phone.strip()
        if phone == "-":
            return True
        if phone.startswith("8"):
            phone = "+7" + phone[1:]
        if not phone.startswith("+"):
            phone = "+" + phone
        try:
            import phonenumbers
            from phonenumbers import carrier, timezone, geocoder
            from phonenumbers.phonenumberutil import number_type
            return carrier._is_mobile(number_type(phonenumbers.parse(phone)))
        except Exception as e:
            logger.exception("phone number validation error")
            return False


class WhatsappNumberQuestion(TextQuestion):
    question_id = "WhatsappNumberQuestion"
    question_text = "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä whatsapp, –∏–ª–∏ –º–∏–Ω—É—Å –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞"

    async def validator(self, phone):
        phone = phone.strip()
        if phone == "-":
            return True
        if phone.startswith("8"):
            phone = "+7" + phone[1:]
        if not phone.startswith("+"):
            phone = "+" + phone
        try:
            import phonenumbers
            from phonenumbers import carrier, timezone, geocoder
            from phonenumbers.phonenumberutil import number_type
            return carrier._is_mobile(number_type(phonenumbers.parse(phone)))
        except Exception as e:
            logger.exception("phone number validation error")
            return False


class VerificationPhotoQuestion(MediaQuestion):
    question_id = "VerificationPhotoQuestion"
    question_text = "–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –í–∞–º –º—É–∂—á–∏–Ω—É –º—ã –¥–æ–ª–∂–Ω—ã —É–±–µ–¥–∏—Ç—Å—è –≤ —Ç–æ–º, —á—Ç–æ —ç—Ç–æ –≤–∞—à–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏. \n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤ —á–∞—Ç –≤–∞—à–µ —Å–µ–ª—Ñ–∏ —Å –ª–∏—Ü–æ–º –∏ –∂–µ—Å—Ç–æ–º ü§ûüèæ, –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏. \n–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è —Ä–æ–±–æ—Ç–æ–º, –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ª–∏—á–Ω–æ—Å—Ç–∏ –≤–∞—à–µ —Ñ–æ—Ç–æ —É–¥–∞–ª—è–µ—Ç—Å—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.\n –î–ª—è –≤–∞—à–µ–≥–æ —É–¥–æ–±—Å—Ç–≤–∞ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, –º—ã –±–æ—Ä–µ–º—Å—è –∑–∞ —Ç–æ, —á—Ç–æ–±—ã –≤—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –±—ã–ª–∏ —Ä–µ–∞–ª—å–Ω—ã–º–∏ –ª—é–¥—å–º–∏.\n –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ! –£–¥–∞—á–Ω—ã—Ö –∑–Ω–∞–∫–æ–º—Å—Ç–≤...‚ô•Ô∏è"
    is_approve = True


class AddPhotoQuestion(BinaryQuestion):
    question_id = "AddPhotoQuestion"
    question_text = "–ü—Ä–∏—à–ª–∏—Ç–µ –í–∞—à–∏ —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ.\n–ú—É–∂—á–∏–Ω–∞–º —É–∂–µ –¥–∞–≤–Ω–æ –Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ, –∑–∞—á–∞—Å—Ç—É—é –æ—Ç —Ç–æ–≥–æ, —á—Ç–æ –¥–µ–≤—É—à–∫–∏ —á–∞—Å—Ç–æ –≤ –∂–∏–∑–Ω–∏ –≤—ã–≥–ª—è–¥—è—Ç —Å–æ–≤—Å–µ–º –∏–Ω–∞—á–µ, –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ—Å–∏–º –í–∞—Å –±—ã—Ç—å –ø—Ä–µ–¥–µ–ª—å–Ω–æ —á–µ—Å—Ç–Ω–æ–π. \n–ü–µ—Ä–µ—á–µ–Ω—å —Ñ–æ—Ç–æ, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å:\n‚ñ´Ô∏è –§–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ –ª–∏—Ü–∞/—Å–µ–ª—Ñ–∏ (–º–∏–Ω–∏–º—É–º –º–∞–∫–∏—è–∂–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤)\n‚ñ´Ô∏è –§–∏–≥—É—Ä–∞ —Å —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∫—É—Ä—Å–æ–≤, –≤ –ø–æ–ª–Ω—ã–π —Ä–æ—Å—Ç, –≤ –æ–±—Ç—è–≥–∏–≤–∞—é—â–µ–π –æ–¥–µ–∂–¥–µ –∏–ª–∏ –∫—É–ø–∞–ª—å–Ω–∏–∫–µ, –≥–¥–µ —Ö–æ—Ä–æ—à–æ –±—É–¥—É—Ç –≤–∏–¥–Ω—ã: –≥—Ä—É–¥—å, —è–≥–æ–¥–∏—Ü—ã, –Ω–æ–≥–∏, –∂–∏–≤–æ—Ç.\‚ñ´Ô∏è –†–∞–∑—Ä–µ—à–∞–µ—Ç—Å—è –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ —Å–æ —Å—Ç—É–¥–∏–π–Ω—ã—Ö —Å—ä—ë–º–æ–∫ ‚ñ´Ô∏è –í—Å–µ–≥–æ –Ω–µ –±–æ–ª–µ–µ 10 —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ\n–°–æ–≤–µ—Ç. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ –¥–æ—Å—Ç–æ–π–Ω–æ–≥–æ –º—É–∂—á–∏–Ω—É, —Ç–æ –ø–æ—Ç—Ä–∞—Ç—å—Ç–µ 20 –º–∏–Ω—É—Ç —Å–≤–æ–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ —Å–Ω–∏–º–∏—Ç–µ –Ω–æ–≤—ã–µ —Ñ–æ—Ç–æ. \n–ï—Å–ª–∏ –æ–Ω–∏ –Ω–µ –±—É–¥—É—Ç –ø–æ–¥—Ö–æ–¥–∏—Ç—å, —Ç–æ –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –Ω–µ –ø—Ä–æ–π–¥—ë—Ç –º–æ–¥–µ—Ä–∞—Ü–∏—é –∏ –Ω–∞—à–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–∏—Ç –í–∞–º –æ–± —ç—Ç–æ–º.\n –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ?"

    async def processor(self, msg, choice):
        state = Dispatcher.get_current().current_state()
        async with state.proxy() as data:
            data["AddPhotoQuestion"] = ("–î–∞" in choice)

    async def next(self):
        state = Dispatcher.get_current().current_state()
        async with state.proxy() as data:
            if data.get("AddPhotoQuestion", False):
                return "PhotoQuestion"

        return self.next_id


class PhotoQuestion(MediaQuestion):
    question_id = "PhotoQuestion"
    question_text = "–ñ–¥—É —Ñ–æ—Ç–æ"
    is_approve = False
