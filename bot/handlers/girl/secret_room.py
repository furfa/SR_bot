from aiogram import types
from aiogram.dispatcher import FSMContext

from api.base import request
from api.girl_form import GirlForm
from keyboards.inline.girl_secret_room import SrMenuInline
from templates.girl.secret_room import WELCOME_MESSAGE, CREATE_FORM, FORM_ON_MODERATION, FORM_CONFIRMED, FORM_REJECTED


async def display_girl_form(gf: GirlForm):
    text = ""
    if gf.has_top_status:
        text += "üñ§ –¢–æ–ø —Å—Ç–∞—Ç—É—Å\n"

    # –ì–æ–≤–Ω–æ–∫–æ–¥
    country_list = await request("get", "location/country/")
    city_list = []
    for country in country_list:
        city_list.extend(country["cities"])

    if gf.country:
        text += "<b>–°—Ç—Ä–∞–Ω–∞:</b> "
        for country in country_list:
            if country["id"] == gf.country:
                text += country["name"]
        text += "\n"

    if gf.city:
        text += "<b>–ì–æ—Ä–æ–¥:</b> "
        for city in city_list:
            if city["id"] == gf.city:
                text += city["name"]
        text += "\n"

    normal_names = {
        'age': "–í–æ–∑—Ä–∞—Å—Ç",
        'sex': "–°–µ–∫—Å—É–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è",
        'name': "–ò–º—è",
        'about': "–û —Å–µ–±–µ",
        'short': "–ö–æ—Ä–æ—Ç–∫–∏–µ —Å–≤–∏–¥–∞–Ω–∏—è",
        'abroad': "–ü–æ–µ–∑–¥–∫–∏ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—É",
        'documents': "–î–æ–∫—É–º–µ–Ω—Ç—ã",
        'body_params': "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ–ª–∞",
        'short_amount': "–ü—Ä–∞–π—Å –∑–∞ –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–≤–∏–¥–∞–Ω–∏—è",
        'finance_support': "–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞",
        'whatsapp_number': "–ù–æ–º–µ—Ä whatsapp",
        'married_relations': "–û—Ç–Ω–æ—à–µ–Ω–∏—è —Å –∂–µ–Ω–∞—Ç—ã–º–∏",
        'work_phone_number': "–†–∞–±–æ—á–∏–π –Ω–æ–º–µ—Ä",
        'sponsorship_relations': "–°–ø–æ–Ω—Å–æ—Ä—Å–∫–∏–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è",
        'nationality': "–ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å"
    }
    for k, v in gf.additional_data.items():
        if v is None:
            continue
        if not normal_names.get(k):
            continue
        proc_k = normal_names[k]
        proc_v = ""
        if type(v) == bool:
            proc_v = "–î–∞" if v else "–ù–µ—Ç"
        elif type(v) == list:
            proc_v = ", ".join(v)
        else:
            proc_v = v
        text += f"<b>{proc_k}</b>: {proc_v}\n"
    return text


async def welcome(msg: types.Message):
    await msg.answer(WELCOME_MESSAGE, reply_markup=SrMenuInline.menu())


async def welcome_query(query: types.CallbackQuery, state: FSMContext, callback_data: dict):
    await query.message.edit_text(WELCOME_MESSAGE, reply_markup=SrMenuInline.menu())


async def form_menu(query: types.CallbackQuery, state: FSMContext, callback_data: dict):
    await query.message.delete()
    try:
        gf = await GirlForm.get()
    except ValueError:
        await query.message.answer(CREATE_FORM, reply_markup=SrMenuInline.ask_to_create_form())
        return
    if gf.status == "CREATED":
        await query.message.answer(CREATE_FORM, reply_markup=SrMenuInline.ask_to_create_form())
        return
    if gf.status == "FILLED":
        await query.message.answer(FORM_ON_MODERATION, reply_markup=SrMenuInline.only_back())
        return

    if gf.status == "CONFIRMED":
        await query.message.answer(FORM_CONFIRMED.format(await display_girl_form(gf)),
                                      reply_markup=SrMenuInline.form_menu())
        return

    if gf.status == "REJECTED":
        await query.message.answer(FORM_REJECTED, reply_markup=SrMenuInline.ask_to_create_form())
        return

    await query.message.answer(CREATE_FORM, reply_markup=SrMenuInline.ask_to_create_form())


async def delete_form(query: types.CallbackQuery, state: FSMContext, callback_data: dict):
    gf = await GirlForm.update(status="DELETED")

    await query.message.edit_text("–£–¥–∞–ª–µ–Ω–æ", reply_markup=SrMenuInline.only_back())
